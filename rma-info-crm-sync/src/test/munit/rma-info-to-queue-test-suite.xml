<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:global.xml"/>
        <spring:import resource="classpath:lookup.xml"/>
        <spring:import resource="classpath:rma-info.xml"/>
        <spring:import resource="classpath:rma-info-queue-to-crm.xml"/>
    </spring:beans>
    <munit:test name="rma-info-test-suite-rma-info-flowTest-success" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock-TransactionLog-JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-RMA-to-Queue-JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['rma_info_queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-TransactionLogUpdate-JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogUpdate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <set-payload value="#[getResource('testdata//rmalist.json').asString()]" doc:name="Set List RMA Payload"/>
        <flow-ref name="rma-info-flow" doc:name="rma-info-flow"/>
        <munit:assert-on-equals message="The Response is not correct!" expectedValue="{&quot;code&quot;:&quot;104&quot;,&quot;message&quot;:&quot;RMA Info to queue service processed successfully&quot;}" actualValue="#[message.payloadAs(java.lang.String)]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="rma-info-to-queue-test-suite-flowTest-BadRequest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock - TransactionEntry - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - ErrorMessageLog - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['ErrorMessageLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Transaction Log Update- JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogUpdate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Notification Service">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('NotificationService-Support')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <set-payload value="#[getResource('testdata/badrequest.json').asString()]" doc:name="Set Bad Request Payload"/>
        <flow-ref name="rma-info-flow" doc:name="Flow-ref to rma-info-flow"/>
        <munit:assert-true message="The response is not correct !!!" condition="#[message.payloadAs(java.lang.String).contains(&quot;code&quot;:&quot;101&quot;)]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="rma-info-to-queue-test-suite-jms-service-unavailable" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock - TransactionLogEntry - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;1&quot;]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Error Transaction Log - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['ErrorMessageLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;1&quot;]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Transcation Log Failed Update">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogUpdate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;1&quot;]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Notification Service">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('NotificationService-Support')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;1&quot;]"/>
        </mock:when>
        <set-payload value="#[getResource('testdata/rmalist.json').asString()]" doc:name="Set RMA List Payload"/>
        <flow-ref name="rma-info-flow" doc:name="Flow-ref to rma-info-flow"/>
        <munit:assert-true message="The response is not correct !!!" condition="#[message.payloadAs(java.lang.String).contains('&quot;code&quot;:&quot;103&quot;')]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="rma-info-to-queue-test-suite-flowTest-no-records-available" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Transcation Log Entry - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogEntry']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock - Transaction Log Update - JMS">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['TransactionLogUpdate']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['1']"/>
        </mock:when>
        <set-payload value="#[getResource('testdata/norecords.json').asString()]" doc:name="Set Empty Payload"/>
        <flow-ref name="rma-info-flow" doc:name="Flow-ref to rma-info-flow"/>
        <munit:assert-true message="The response is not correct !!!" condition="#[message.payloadAs(java.lang.String).contains('&quot;code&quot;:&quot;102&quot;')]" doc:name="Assert True"/>
    </munit:test>
</mule>
