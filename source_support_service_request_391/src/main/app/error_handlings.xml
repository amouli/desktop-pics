<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
<catch-exception-strategy name="sourceSupportServiceCatch_Exception_Strategy">
        <set-session-variable variableName="sv_error_message" value="#[sessionVars.sourcesupport != null &amp;&amp; sessionVars.sourcesupport != &quot;&quot; ? sessionVars.sourcesupport : groovy:message.getExceptionPayload().getRootException().getMessage().toString()]" doc:name="sv_error_message"/>
        <set-session-variable variableName="sv_error_details" value="#[groovy:message.getExceptionPayload().getInfo().toString()]" doc:name="sv_error_details"/>
        <parse-template location="ExceptionTemplate.html" doc:name="Parse Template"/>
        <set-variable variableName="fv_current_payload" value="#[payload]" doc:name="fv_current_payload"/>
        <set-payload value="#[sessionVars.sv_service_request_queue]" doc:name="Set Payload"/>
        <jms:outbound-endpoint queue="${source_support_service_request_failed_queue}" connector-ref="Active_MQ" doc:name="source_support_service_request_failed_queue"/>
        <set-payload value="#[flowVars.fv_current_payload]" doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" connector-ref="SMTP" to="${email.to}" from="${email.from}" subject="${email_subject}(${env.name})" cc="${email.cc.list}" bcc="${email.bcc.list}" responseTimeout="10000" doc:name="SMTP-EQUUS"  />
    </catch-exception-strategy>
    
    <catch-exception-strategy name="updateServiceRequestCatch_Exception_Strategy">
        <set-session-variable variableName="sv_error_message" value="#[sessionVars.updateServicerequest != null &amp;&amp; sessionVars.updateServicerequest != &quot;&quot; ? sessionVars.updateServicerequest : groovy:message.getExceptionPayload().getInfo().toString()]" doc:name="sv_error_message"/>
        <set-session-variable variableName="sv_error_details" value="#[groovy:message.getExceptionPayload().getInfo().toString()]" doc:name="sv_error_details"/>
        <parse-template location="ExceptionTemplate.html" doc:name="Parse Template"/>
        <set-variable variableName="fv_current_payload" value="#[payload]" doc:name="fv_current_payload"/>
        <set-payload value="#[sessionVars.sv_update_service_request]" doc:name="Set Payload"/>
        <jms:outbound-endpoint queue="${update_service_request_failed_queue}" connector-ref="Active_MQ" doc:name="update_service_request_failed_queue"/>
        <set-payload value="#[flowVars.fv_current_payload]" doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" connector-ref="SMTP" to="${email.to}" from="${email.from}" subject="${email_subject}(${env.name})" cc="${email.cc.list}" bcc="${email.bcc.list}" responseTimeout="10000" doc:name="SMTP-EQUUS"  />
    </catch-exception-strategy>
    <sub-flow name="sourceSupportService_error_handlingSub_Flow">
        <object-to-string-transformer doc:name="Object to String"/>
        <parse-template location="Exception.html" doc:name="Parse Template"/>
        <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}"   connector-ref="SMTP" to="${email.to}" from="${email.from}" subject="${email_subject}(${env.name})" cc="${email.cc.list}" bcc="${email.bcc.list}" responseTimeout="10000" doc:name="SMTP"/>
    </sub-flow>
    
</mule>
